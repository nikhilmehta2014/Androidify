<?xml version="1.0" encoding="utf-8"?>
<!--
Check for Data Binding errors by clicking on "Make Project" in the Build menu in Android Studio.
Problems will prevent the app from building and the errors will be shown in the build log.
-->
<layout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools">

    <!--The <data> tag will contain layout variables.-->
    <data>

        <!--
        Replace the two variables for a single ViewModel.
        This is the way to go in the majority of cases since it keeps your presentation code and state in one place.
        -->
        <variable
            name="viewModel"
            type="com.nikhil.androidify.codelabs.databinding.BasicSampleViewModel" />

    </data>

    <!--
    Layout variables are used to write layout expressions.
    Layout expressions are placed in the value of element attributes and they use the @{expression} format. Here are some examples:
    // Some examples of complex layout expressions
    * android:text="@{String.valueOf(index + 1)}"
    * android:visibility="@{age < 13 ? View.GONE : View.VISIBLE}"
    * android:transitionName='@{"image_" + id}'

    The layout expression language gives you a lot of power, but it is best to avoid nesting complex logic inside views.
    Complex expressions will make your layout harder to read and maintain.
    -->

    <!--
    By using layout expressions to bind components in the layout file, you can:
    * Improve your app's performance
    * Help prevent memory leaks and null pointer exceptions
    * Streamline your activity's code by removing UI framework calls

    Here are some examples:
    // Bind the name property of the viewmodel to the text attribute
    android:text="@{viewmodel.name}"
    // Bind the nameVisible property of the viewmodel to the visibility attribute
    android:visibility="@{viewmodel.nameVisible}"
    // Call the onLike() method on the viewmodel when the View is clicked.
    android:onClick="@{() -> viewmodel.onLike()}"
    -->
    <androidx.constraintlayout.widget.ConstraintLayout
        android:layout_width="match_parent"
        android:layout_height="match_parent">

        <!--Layout expressions start with an @ symbol and are wrapped inside curly braces { }.-->
        <TextView
            android:id="@+id/plain_name"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="8dp"
            android:layout_marginEnd="128dp"
            android:text="@{viewModel.name}"
            android:textAppearance="@style/TextAppearance.AppCompat.Large"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/name_label" />

        <TextView
            android:id="@+id/plain_lastname"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="8dp"
            android:layout_marginEnd="128dp"
            android:text="@{viewModel.lastName}"
            android:textAppearance="@style/TextAppearance.AppCompat.Large"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/lastname_label" />

        <ImageView
            android:id="@+id/imageView"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginTop="24dp"
            android:layout_marginEnd="24dp"
            android:contentDescription="@string/profile_avatar_cd"
            android:minWidth="48dp"
            android:minHeight="48dp"
            app:layout_constraintBottom_toTopOf="@+id/likes_label"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            app:layout_constraintVertical_bias="0.0"
            app:layout_constraintVertical_chainStyle="packed" />

        <TextView
            android:id="@+id/likes"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="@{Integer.toString(viewModel.likes)}"
            android:textAppearance="@style/TextAppearance.AppCompat.Title"
            app:layout_constraintBottom_toTopOf="@+id/like_button"
            app:layout_constraintEnd_toEndOf="@+id/likes_label"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="@+id/likes_label"
            app:layout_constraintTop_toBottomOf="@+id/likes_label" />

        <!--
        The former onClick attribute used an unsafe mechanism in which the onLike() method in the activity or fragment is called when the view is clicked.
        If a method with that exact signature doesn't exist, the app crashes.

        The new way is much safer because it's checked at compile time and
        uses a lambda expression to call the onLike() method of the view model.
        -->
        <Button
            android:id="@+id/like_button"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="16dp"
            android:layout_marginEnd="16dp"
            android:onClick="@{() -> viewModel.onLike()}"
            android:text="@string/like"
            app:layout_constraintBottom_toTopOf="@+id/progressBar"
            app:layout_constraintEnd_toEndOf="@+id/imageView"
            app:layout_constraintStart_toStartOf="@+id/imageView"
            app:layout_constraintTop_toBottomOf="@+id/likes" />

        <TextView
            android:id="@+id/name_label"
            android:layout_width="38dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="8dp"
            android:text="@string/name_label"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent" />

        <TextView
            android:id="@+id/lastname_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="16dp"
            android:layout_marginTop="8dp"
            android:text="@string/last_name_label"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/plain_name" />

        <TextView
            android:id="@+id/likes_label"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_marginEnd="8dp"
            android:text="@string/likes"
            android:textAlignment="center"
            app:layout_constraintBottom_toTopOf="@+id/likes"
            app:layout_constraintEnd_toEndOf="@+id/imageView"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="@+id/imageView"
            app:layout_constraintTop_toBottomOf="@+id/imageView" />

        <!--
        We're binding the progressScaled attribute to the number of likes and we're just passing a literal integer to the max attribute.
        If you don't add the @{} format, Data Binding won't be able to find the correct Binding Adapter.
        -->
        <ProgressBar
            android:id="@+id/progressBar"
            style="?android:attr/progressBarStyleHorizontal"
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_marginStart="8dp"
            android:layout_marginTop="8dp"
            android:layout_marginEnd="8dp"
            app:hideIfZero="@{viewModel.likes}"
            app:progressScaled="@{viewModel.likes}"
            android:max="@{100}"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="@+id/like_button"
            app:layout_constraintHorizontal_bias="0.5"
            app:layout_constraintStart_toStartOf="@+id/like_button"
            app:layout_constraintTop_toBottomOf="@+id/like_button"
            tools:progressBackgroundTint="@android:color/darker_gray" />
    </androidx.constraintlayout.widget.ConstraintLayout>
</layout>
